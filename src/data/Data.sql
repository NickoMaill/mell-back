CREATE  FUNCTION update_updatedAt()
RETURNS TRIGGER AS $$
BEGIN
    NEW."updatedat" = now();
    RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TABLE Users (
	ID SERIAL PRIMARY KEY,
  email VARCHAR(200) NOT NULL UNIQUE,
  password VARCHAR(300),
  lastname VARCHAR(100) NOT NULL;
  firstname VARCHAR(100) NOT NULL;
  mobile VARCHAR(20);
  levelAccess INTEGER NOT NULL;
  addedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TRIGGER update_updatedAt
    BEFORE UPDATE
    ON users
    FOR EACH ROW
EXECUTE PROCEDURE update_updatedAt();

CREATE TABLE medias (

);

CREATE TABLE Calendar (
	ID SERIAL PRIMARY KEY,
  mediaId INTEGER,
  title VARCHAR(400) NOT NULL,
  place VARCHAR(400),
  address VARCHAR(200) NOT NULL,
  postalCode VARCHAR(5),
  city VARCHAR(100),
  country VARCHAR(100),
  lat NUMERIC,
  long NUMERIC,
  startdate TIMESTAMP NOT NULL,
  endDate TIMESTAMP,
  Schedule TIME,
  AddedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  UpdatedAt TIMESTAMP,
  CONSTRAINT fk_media FOREIGN KEY (mediaId) REFERENCES medias(id)
);

CREATE TRIGGER update_updatedAt
    BEFORE UPDATE
    ON Calendar
    FOR EACH ROW
EXECUTE PROCEDURE update_updatedAt();

CREATE TABLE Tokens (
	ID SERIAL PRIMARY KEY,
  UserId INTEGER,
  token VARCHAR(1000),
  deviceId UUID,
  userAgent TEXT,
  lastUsed TIMESTAMP,
  userIp VARCHAR(30),
  ADDEDAT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  UpdatedAt TIMESTAMP,
  CONSTRAINT fk_user FOREIGN KEY (userId) REFERENCES users(id)
);

CREATE TRIGGER update_updatedAt
    BEFORE UPDATE
    ON tokens
    FOR EACH ROW
EXECUTE PROCEDURE update_updatedAt();

CREATE TABLE DataText (
	ID SERIAL PRIMARY KEY,
  type VARCHAR(50) NOT NULL,
  description VARCHAR(1000) NOT NULL,
  code VARCHAR(10) NOT NULL,
  sortOrder INTEGER,
  AddedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  UpdatedAt TIMESTAMP
);

CREATE TRIGGER update_updatedAt
    BEFORE UPDATE
    ON DataText
    FOR EACH ROW
EXECUTE PROCEDURE update_updatedAt();

CREATE TABLE Comments (
	ID SERIAL PRIMARY KEY,
  showId INTEGER,
	name VARCHAR(200),
  title VARCHAR(200),
  rating INTEGER,
  descrition TEXT,
  AddedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  UpdatedAt TIMESTAMP,
  CONSTRAINT fk_show FOREIGN KEY (showId) REFERENCES shows(id)
);

CREATE TRIGGER update_updatedAt
    BEFORE UPDATE
    ON Comments
    FOR EACH ROW
EXECUTE PROCEDURE update_updatedAt();

CREATE TABLE Subscribers (
	ID SERIAL PRIMARY KEY,
  email VARCHAR(300) NOT NULL UNIQUE,
  phoneNumber VARCHAR(12),
  firstName VARCHAR(100),
  lastName VARCHAR(100),
  city VARCHAR(100),
  country VARCHAR(100),
  lat NUMERIC,
  long NUMERIC,
  AddedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  UpdatedAt TIMESTAMP
);

CREATE TRIGGER update_updatedAt
    BEFORE UPDATE
    ON Subscribers
    FOR EACH ROW
EXECUTE PROCEDURE update_updatedAt();

CREATE TABLE Logs (
	ID SERIAL PRIMARY KEY,
  action VARCHAR(200) NOT NULL,
  description TEXT,
  target VARCHAR(50),
  call VARCHAR(100),
  AddedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  UpdatedAt TIMESTAMP
);

CREATE TRIGGER update_updatedAt
    BEFORE UPDATE
    ON Logs
    FOR EACH ROW
EXECUTE PROCEDURE update_updatedAt();

ALTER TABLE Logs ADD COLUMN userId INTEGER;
ALTER TABLE Logs ADD CONSTRAINT fk_user FOREIGN KEY (userId) REFERENCES Users(id);

ALTER TABLE Users ADD COLUMN lastname VARCHAR(100) NOT NULL;
ALTER TABLE Users ADD COLUMN firstname VARCHAR(100) NOT NULL;
ALTER TABLE Users ADD COLUMN mobile VARCHAR(20);
ALTER TABLE Users ADD COLUMN levelAccess INTEGER NOT NULL;